/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CommonUtilLib,
  CommonUtilLibInterface,
} from "../../libraries/CommonUtilLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_seed",
        type: "uint256",
      },
    ],
    name: "generateTraits",
    outputs: [
      {
        internalType: "uint256",
        name: "traits",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a9610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806379b92f27146038575b600080fd5b60496043366004605b565b50600090565b60405190815260200160405180910390f35b600060208284031215606c57600080fd5b503591905056fea26469706673582212208ac0caa47c6cc4dd55312bb00dd33180c271946c18c4309ab76937fc6fd96ba764736f6c63430008060033";

type CommonUtilLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommonUtilLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommonUtilLib__factory extends ContractFactory {
  constructor(...args: CommonUtilLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CommonUtilLib> {
    return super.deploy(overrides || {}) as Promise<CommonUtilLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CommonUtilLib {
    return super.attach(address) as CommonUtilLib;
  }
  override connect(signer: Signer): CommonUtilLib__factory {
    return super.connect(signer) as CommonUtilLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommonUtilLibInterface {
    return new utils.Interface(_abi) as CommonUtilLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CommonUtilLib {
    return new Contract(address, _abi, signerOrProvider) as CommonUtilLib;
  }
}
